generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  contactNo  String
  password   String
  role       UserRole @default(USER)
  profileImg String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects     Project[]
  taskStatuses TaskStatus[]
  tasks        Task[]
  comments     Comment[]

  projectAssigners Assign[] @relation("projectAssigners")
  projectAssignees Assign[] @relation("projectAssignees")

  projectInvitationSenders   Team[] @relation("projectInvitationSenders")
  projectInvitationReceivers Team[] @relation("projectInvitationReceivers")

  @@map("users")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

model Priority {
  id          String  @id @default(uuid())
  title       String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks Task[]

  @@map("priorities")
}

model TaskStatus {
  id          String  @id @default(uuid())
  title       String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creatorId String?
  createdBy User?   @relation(fields: [creatorId], references: [id])

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  tasks Task[]

  @@map("task-statuses")
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String
  dueDate     DateTime?
  profileImg  String?

  creatorId String
  createdBy User   @relation(fields: [creatorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles        Role[]
  taskStatuses TaskStatus[]
  tasks        Task[]
  teams        Team[]

  @@map("projects")
}

model Role {
  id          String  @id @default(uuid())
  title       String
  description String?

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teams Team[]

  @@map("roles")
}

model Team {
  id String @id @default(uuid())

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  senderId String
  sender   User   @relation("projectInvitationSenders", fields: [senderId], references: [id])

  receiverId String
  receiver   User   @relation("projectInvitationReceivers", fields: [receiverId], references: [id])

  status TeamMembershipStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teams")
}

enum TeamMembershipStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime?

  priorityId String
  priority   Priority @relation(fields: [priorityId], references: [id])

  statusId String
  status   TaskStatus @relation(fields: [statusId], references: [id])

  creatorId String
  createdBy User   @relation(fields: [creatorId], references: [id])

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assigns  Assign[]
  comments Comment[]

  @@map("tasks")
}

model Assign {
  id String @id @default(uuid())

  taskId String
  task   Task   @relation(fields: [taskId], references: [id])

  assignerId String
  assigner   User   @relation("projectAssigners", fields: [assignerId], references: [id])

  assigneeId String
  assignee   User   @relation("projectAssignees", fields: [assigneeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("assigns")
}

model Comment {
  id   String @id @default(uuid())
  text String

  taskId String
  task   Task   @relation(fields: [taskId], references: [id])

  commenterId String
  commenter   User   @relation(fields: [commenterId], references: [id])

  parentCommentId String?
  parentComment   Comment? @relation("comments", fields: [parentCommentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[] @relation("comments")

  @@map("comments")
}
